package com.shaofeng;

public class Sort {

	public static void main(String[] args) {

		int[] array = {1,2,55,4,1,0,5,-5,4,1,-75,6,636,6,8,5,78};
		quickSort(array);
		
		for (int i = 0; i < array.length; i ++) {
			System.out.println(array[i]);
		}
	}
	
	//冒泡排序
	public static void bubbleSort(int[] array) {
		for(int i = 0; i < array.length - 1; i++) {
			for (int j = 0; j <array.length - i - 1; j ++) {
				if (array[j] > array[j + 1]) {
					int temp = array[j];
					array[j] = array[j + 1];
					array[j + 1] = temp;
				}
			}
		}
	}
	
	//选择排序
	public static void selectSort (int array[]) {
	    for (int i = 0;i < array.length - 1; i ++) {
	        for (int j = i + 1;j < array.length;j ++) {
	            if (array[j] < array[i]) {
	                int temp = array[i];
	                array[i] = array[j];
	                array[j] = temp;
	            }
	        }
	    }
	}
	
	//快速排序
	public static void quickSort(int[] array, int indexStart, int indexEnd) {
	    int pivotIndex = (indexStart + indexEnd) / 2;
	    // swap
	    swap(array, pivotIndex, indexEnd);

	    int k = partition(array, indexStart - 1, indexEnd, array[indexEnd]);
	    swap(array, k, indexEnd);
	    if ((k - indexStart) > 1)
	        quickSort(array, indexStart, k - 1);
	    if ((indexEnd - k) > 1)
	        quickSort(array, k + 1, indexEnd);
	}

	private static int partition(int[] array, int left, int right, int pivot) {
	    do {
	        while (array[++left] < pivot)
	            ;
	        while ((right != 0) && array[--right] > pivot)
	            ;
	        swap(array, left, right);
	    } while (left < right);
	    swap(array, left, right);
	    return left;
	}

	public static void swap(int[] array, int i, int j) {
	    int temp = array[i];
	    array[i] = array[j];
	    array[j] = temp;
	}
	
	/**
	 * 二分查找
	 * @param 数组集合
	 * @param 被查找的值
	 * @return 返回该值在数组中的索引(如果没有返回 -1)
	 */
	public static int getIndex(int array[], int value) {

	    //定义最大索引和最小索引
	    int max = array.length - 1;
	    int min = 0;
	    //计算中间索引
	    int mid = (max + min) / 2;

	    //拿中间的索引的值和好查找的值进行比较
	    while (array[mid] != value) {
	        if (array[mid] > value) {
	            max = mid - 1;
	        } else if (array[mid] < value) {
	            min = min + 1;
	        }
	        //数组中没有该元素
	        if (min > max) {
	            return -1;
	        }
	        mid = (max + min) / 2;
	    }
	    return mid;
	}

}
